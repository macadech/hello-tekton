apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: registryNamespace
      description: the ibmcloud registry namespace
    - name: imageName
      description: the base image name
      default: "hello-containers-tekton"
    - name: registryRegion
      description: the ibmcloud registry region
  results:
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: image-digest
      description: the image digest (sha-256 hash) for the built image
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-build-check
      image: ibmcom/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          cd /workspace && source pre-build-check.sh;
    - name: build-docker-image
      image: ibmcom/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
        - name: ARCHIVE_DIR
          value: "/artifacts"
        - name: BUILD_NUMBER
          value: "0"
        - name: GIT_BRANCH
          value: $(params.revision)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          cd /workspace;
          export GIT_COMMIT=$(git rev-parse HEAD);
          cd ..;
          export REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}');
          cd /workspace && source build-docker-image.sh;
  sidecars:
    - image: moby/buildkit:v0.8.1
      name: server
      securityContext:
        privileged: true
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
      command: ["sh", "-c"]
      args:
        - if [[ $(df -PT /var/lib/buildkit | awk 'NR==2 {print $2}') == virtiofs ]]; then
           apk add e2fsprogs &&
           truncate -s 20G /tmp/disk.img &&
           mkfs.ext4 /tmp/disk.img &&
           mount /tmp/disk.img /var/lib/buildkit; fi && buildkitd --addr tcp://0.0.0.0:1234;
      # Wait for the buildkit daemon to have available workers.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["buildctl", "--addr", "tcp://0.0.0.0:1234", "debug", "workers"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: registryRegion
      description: the ibmcloud registry region
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: check-vulnerabilities
      image: ibmcom/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: HOME
          value: "/root"
        - name: REGION
          value: $(params.registryRegion)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          while read line; do export $line; done < /artifacts/build.properties;
          cp /artifacts/build.properties .;
          cd /workspace && source check-vulnerabilities.sh || true;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: deployment-file
      default: deployment.yml
    - name: clusterNamespace
      default: prod
    - name: cluster
      description: The IBM Cloud Kubernetes cluster name
    - name: clusterRegion
      description: The IBM Cloud Kubernetes cluster region
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-deploy-check
      image: ibmcom/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          cd /workspace;
          export IKS_BETA_VERSION=1;
          ibmcloud ks cluster config -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}";
          if which oc > /dev/null && ibmcloud ks cluster get -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
          while read line; do export $line; done < /artifacts/build.properties;
          cp /artifacts/build.properties .;
          cd /workspace && source pre-deploy-check.sh;
    - name: deploy-to-kubernetes
      image: ibmcom/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export IKS_BETA_VERSION=1;
          ibmcloud ks cluster config -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}";
          if which oc > /dev/null && ibmcloud ks cluster get -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
          while read line; do export $line; done < /artifacts/build.properties;
          cp /artifacts/build.properties .;
          cd /workspace && source deploy-to-kubernetes.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-commit-inventory-repo-task
spec:
  params:
    - name: repository
      description: The Git Repository for the Application Source Code. If empty, the Repository url will be found from toolchain
      default: repository
    - name: appname
      description: The name of the application passed as environment variable
    - name: commitid
      description: The commit id of the Application Source Code Repository that triggered the build.
    - name: image-url
      description: The name of the binary artifact generated by the build
    - name: image-digest
      description: The checksum of the binary artifact generated by the build
    - name: shuttle-properties-file
  workspaces:
    - name: artifacts
      description: A workspace to store the output of intermittent steps
      mountPath: /artifacts
    - name: output
      description: A workspace to store the output of intermittent steps
      mountPath: /output
  steps:
    - name: commit-build-metadata
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      workingDir: /artifacts
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: APPNAME
          value: $(params.appname)
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: GIT_COMMIT
          value: $(params.commitid)
        - name: ARTIFACT
          value: $(params.image-url)
        - name: CHECKSUM
          value: $(params.image-digest)
        - name: INVENTORY_FILE
          value: "inventory.json"
        - name: ENV_FILE
          value: $(params.shuttle-properties-file)
      script: |
          #!/bin/bash
          set -e -o pipefail;
          source ${ENV_FILE}
          cd /artifacts/inventory-repo;
          ls -laht
          git config user.email "xxx@yyy.zzz" && git config user.name "xxx"
          git checkout master
          echo { \"repository_url\": \"${REPOSITORY}\",\"artifact\": \"${ARTIFACT}\",\"build_number\": ${BUILD_NUMBER},\"commit_sha\": \"${GIT_COMMIT}\",\"name\": \"${APPNAME}\",\"pipeline_run_id\": \"${PIPELINE_RUN_ID}\",\"version\": \"v1\",\"signature\": \"${CHECKSUM}\" ,\"REGISTRY_URL\": \"${REGISTRY_URL}\" ,\"REGISTRY_NAMESPACE\": \"${REGISTRY_NAMESPACE}\" ,\"IMAGE_NAME\": \"${IMAGE_NAME}\" ,\"IMAGE_TAGS\": \"${IMAGE_TAGS}\"  ,\"IMAGE_MANIFEST_SHA\": \"${IMAGE_MANIFEST_SHA}\" } > inventory-info.json
          jq . inventory-info.json > $INVENTORY_FILE
          git add ./$INVENTORY_FILE
          git commit -m "Update Evidence"
          git tag ${PIPELINE_RUN_ID}
          git push  origin master
          git push --tags
